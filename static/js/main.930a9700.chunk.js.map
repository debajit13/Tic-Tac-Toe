{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.930a9700.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\n\r\nconst Icon = ({ name }) => {\r\n  switch (name) {\r\n    case \"circle\":\r\n      return <FaRegCircle className=\"icons\" />;\r\n      break;\r\n    case \"cross\":\r\n      return <FaTimes className=\"icons\" />;\r\n      break;\r\n    default:\r\n      return <FaPen className=\"icons\" />;\r\n  }\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState } from \"react\";\r\nimport Icon from \"./components/Icon\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\nimport { FaCentercode } from \"react-icons/fa\";\r\n\r\nconst itemArray = new Array(9).fill(\"empty\");\r\n\r\nconst App = () => {\r\n  const [isCross, setIsCross] = useState(false);\r\n  const [winMessage, setWinMessage] = useState(\"\");\r\n\r\n  const reloadGame = () => {\r\n    setIsCross(false);\r\n    setWinMessage(\"\");\r\n    itemArray.fill(\"empty\", 0, 9);\r\n  };\r\n\r\n  const checkIsWinner = () => {\r\n    if (\r\n      itemArray[0] === itemArray[1] &&\r\n      itemArray[0] === itemArray[2] &&\r\n      itemArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[0]} wins`);\r\n    } else if (\r\n      itemArray[3] === itemArray[4] &&\r\n      itemArray[3] === itemArray[5] &&\r\n      itemArray[3] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[3]} wins`);\r\n    } else if (\r\n      itemArray[6] === itemArray[7] &&\r\n      itemArray[6] === itemArray[8] &&\r\n      itemArray[6] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[6]} wins`);\r\n    } else if (\r\n      itemArray[0] === itemArray[3] &&\r\n      itemArray[0] === itemArray[6] &&\r\n      itemArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[0]} wins`);\r\n    } else if (\r\n      itemArray[1] === itemArray[4] &&\r\n      itemArray[1] === itemArray[7] &&\r\n      itemArray[1] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[1]} wins`);\r\n    } else if (\r\n      itemArray[2] === itemArray[5] &&\r\n      itemArray[2] === itemArray[8] &&\r\n      itemArray[2] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[2]} wins`);\r\n    } else if (\r\n      itemArray[0] === itemArray[4] &&\r\n      itemArray[0] === itemArray[8] &&\r\n      itemArray[0] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[0]} wins`);\r\n    } else if (\r\n      itemArray[2] === itemArray[4] &&\r\n      itemArray[2] === itemArray[6] &&\r\n      itemArray[2] !== \"empty\"\r\n    ) {\r\n      setWinMessage(`${itemArray[2]} wins`);\r\n    }\r\n  };\r\n\r\n  const changeItem = (itemNumber) => {\r\n    if (winMessage) {\r\n      return toast(winMessage, { type: \"success\" });\r\n    }\r\n\r\n    if (itemArray[itemNumber] === \"empty\") {\r\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\r\n      setIsCross(!isCross);\r\n    } else {\r\n      return toast(\"already filled\", { type: \"error\" });\r\n    }\r\n    checkIsWinner();\r\n  };\r\n\r\n  return (\r\n    <Container className=\"p-5\">\r\n      <ToastContainer position=\"bottom-center\" />\r\n      <Row>\r\n        <Col md={6} className=\"offset-md-3\">\r\n          {winMessage ? (\r\n            <div className=\"mb-2 mt-2\">\r\n              <h1 className=\"text-primary text-uppercase text-center\">\r\n                {winMessage}\r\n              </h1>\r\n              <Button color=\"success\" block onClick={reloadGame}>\r\n                Reload the game\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <h1 className=\"text-center text-warning\">\r\n              {isCross ? \"Cross\" : \"Circle\"} turns\r\n            </h1>\r\n          )}\r\n          <div className=\"grid\">\r\n            {itemArray.map((item, index) => (\r\n              <Card onClick={() => changeItem(index)} color=\"warning\">\r\n                <CardBody className=\"box\">\r\n                  <Icon name={item} />\r\n                </CardBody>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}